using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Printing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using P2DEngine.GameObjects;
using P2DEngine.GameObjects.Collisions;
using System.Windows.Forms;
using P2DEngine.Managers;
using System.Windows;
using System.Security.Cryptography.X509Certificates;
using static P2DEngine.myPhysicsBlock;

namespace P2DEngine.Games
{
    public class Mariano : myGame
    {
        private myPlayer player;
        private Image Block;
        private Image pipeR;
        private Image pipeL;
        private List<WallBlock> walls;
        bool onGround = false;
        private myTeleporter myTeleporterA, myTeleporterB;
        private myTeleporter myTeleporterC, myTeleporterD;

        public Mariano(int width, int height, int FPS, myCamera c) : base(width, height, FPS, c)
        {
            Block = myImageManager.Get("Block");
            pipeR = myImageManager.Get("Pipe_R");
            pipeL = myImageManager.Get("Pipe_L");

            player = new myPlayer(100, 500, 50, 80, null); // myPlayer will handle its own sprite loading
            myTeleporterA = new myTeleporter(0, 75, 100, 75, pipeL);
            myTeleporterB = new myTeleporter(width-100, 75, 100, 75, pipeR);
            myTeleporterC = new myTeleporter(0, height-125, 100, 75, pipeL);
            myTeleporterD = new myTeleporter(width-100, height-125, 100, 75, pipeR);
            Instantiate(player);

            walls = new List<WallBlock>();

            for(int i = 0; i < 17; i++) //Crea el piso
            {
                walls.Add(new WallBlock((49 * i), 555, 50, 50, Block));
            }

            foreach (var wall in walls)
                Instantiate(wall);

            Instantiate(myTeleporterA);
            Instantiate(myTeleporterB);
            Instantiate(myTeleporterC);
            Instantiate(myTeleporterD);
        }

        private void ResolveCollision(myPlayer player, WallBlock wall)
        {
            // Calculate how much the player overlaps the wall in each axis
            float overlapX = Math.Min(player.x + player.sizeX, wall.x + wall.sizeX) - Math.Max(player.x, wall.x);
            float overlapY = Math.Min(player.y + player.sizeY, wall.y + wall.sizeY) - Math.Max(player.y, wall.y);

            // Resolve the smaller overlap (horizontal or vertical)
            if (overlapY < overlapX)
            {
                // Vertical collision
                if (player.y < wall.y)
                {
                    // Player is above the wall (landed on floor)
                    player.y = wall.y - player.sizeY;
                    player.SetOnGround(true); // Add this method to handle jumping
                    onGround = true;
                    Console.WriteLine("on floor");
                    player.velocityY = 0; // If you have velocity

                }
                else
                {
                    // Player hit a ceiling
                    player.y = wall.y + wall.sizeY;
                    onGround = false; // Player is not on the ground anymore|||
                }
            }
            else
            {
                // Horizontal collision (optional, for walls)
                if (player.x < wall.x)
                    player.x = wall.x - player.sizeX;
                else
                    player.x = wall.x + wall.sizeX;
            }
        }
        private void teleporterCollision(myTeleporter teleporter, myPlayer player)
        {
            if (player.IsColliding(teleporter))
            {
                // Teleport the player to the corresponding teleporter
                if (teleporter == myTeleporterA)
                {
                    player.x = myTeleporterB.x + myTeleporterB.sizeX;
                    player.y = myTeleporterB.y;
                }
                else if (teleporter == myTeleporterB)
                {
                    player.x = myTeleporterA.x - player.sizeX;
                    player.y = myTeleporterA.y;
                }
                else if (teleporter == myTeleporterC)
                {
                    player.x = myTeleporterD.x + myTeleporterD.sizeX;
                    player.y = myTeleporterD.y;
                }
                else if (teleporter == myTeleporterD)
                {
                    player.x = myTeleporterC.x - player.sizeX;
                    player.y = myTeleporterC.y;
                }
            }
        }
        protected override void ProcessInput()
        {
            //Delegate to player
            player.UpdateDirection(deltaTime);
        }

        protected override void Update()
        {
            Console.WriteLine("VelocityX" + player.velocityX);
            Console.WriteLine("VelocityY" + player.velocityY);


            foreach (var wall in walls)
            {
                if (player.IsColliding(wall))
                {
                    ResolveCollision(player, wall);
                }
            }
            if (myTeleporterA.IsColliding(player) || myTeleporterB.IsColliding(player) || myTeleporterC.IsColliding(player) || myTeleporterD.IsColliding(player))
            {
                teleporterCollision(myTeleporterA, player);
                teleporterCollision(myTeleporterB, player);
                teleporterCollision(myTeleporterC, player);
                teleporterCollision(myTeleporterD, player);
            }
            if (!onGround)
            {
                player.SetOnGround(false);
            }
        }

        protected override void RenderGame(Graphics g)
        {
            g.Clear(Color.SkyBlue);

            foreach (var wall in walls)
                wall.Draw(g, new Vector(wall.x, wall.y), new Vector(wall.sizeX, wall.sizeY));

            myTeleporterA.Draw(g, new Vector(myTeleporterA.x, myTeleporterA.y), new Vector(myTeleporterA.sizeX, myTeleporterA.sizeY));
            myTeleporterB.Draw(g, new Vector(myTeleporterB.x, myTeleporterB.y), new Vector(myTeleporterB.sizeX, myTeleporterB.sizeY));
            myTeleporterC.Draw(g, new Vector(myTeleporterC.x, myTeleporterC.y), new Vector(myTeleporterC.sizeX, myTeleporterC.sizeY));
            myTeleporterD.Draw(g, new Vector(myTeleporterD.x, myTeleporterD.y), new Vector(myTeleporterD.sizeX, myTeleporterD.sizeY));
            player.Draw(g, new Vector(player.x, player.y), new Vector(player.sizeX, player.sizeY));
        }
    }
}
